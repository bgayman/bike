// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
/// The layout of the alert’s actions. Only applies to the Alert style alerts, not ActionSheet (see
/// <code>AlertControllerStyle</code>).
/// <ul>
///   <li>
///     automatic:  If the alert has 2 actions, display them horizontally. Otherwise, display them vertically.
///   </li>
///   <li>
///     vertical:   Display the actions vertically.
///   </li>
///   <li>
///     horizontal: Display the actions horizontally.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SDCActionLayout, "ActionLayout") {
  SDCActionLayoutAutomatic = 0,
  SDCActionLayoutVertical = 1,
  SDCActionLayoutHorizontal = 2,
};

enum SDCAlertActionStyle : NSInteger;
@class NSAttributedString;

SWIFT_CLASS_NAMED("AlertAction")
@interface SDCAlertAction : NSObject
/// Creates an action with a plain title.
/// \param title An optional title for the action
///
/// \param style The action’s style
///
/// \param handler An optional closure that’s called when the user taps on this action
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title style:(enum SDCAlertActionStyle)style handler:(void (^ _Nullable)(SDCAlertAction * _Nonnull))handler;
/// Creates an action with a stylized title.
/// \param attributedTitle An optional stylized title
///
/// \param style The action’s style
///
/// \param handler An optional closure that is called when the user taps on this action
///
- (nonnull instancetype)initWithAttributedTitle:(NSAttributedString * _Nullable)attributedTitle style:(enum SDCAlertActionStyle)style handler:(void (^ _Nullable)(SDCAlertAction * _Nonnull))handler;
/// A closure that gets executed when the user taps on this actions in the UI
@property (nonatomic, copy) void (^ _Nullable handler)(SDCAlertAction * _Nonnull);
/// The plain title for the action. Uses <code>attributedTitle</code> directly.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The stylized title for the action.
@property (nonatomic, readonly, strong) NSAttributedString * _Nullable attributedTitle;
/// The action’s style.
@property (nonatomic, readonly) enum SDCAlertActionStyle style;
/// Whether this action can be interacted with by the user.
@property (nonatomic) BOOL isEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The action’s style
/// <ul>
///   <li>
///     normal:      The action will have default font and text color
///   </li>
///   <li>
///     preferred:   The action will take a style that indicates it’s the preferred option
///   </li>
///   <li>
///     destructive: The action will convey that this action will do something destructive
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SDCAlertActionStyle, "AlertActionStyle") {
  SDCAlertActionStyleNormal = 0,
  SDCAlertActionStylePreferred = 1,
  SDCAlertActionStyleDestructive = 2,
};

@class UIView;
@class UITextField;
@class SDCAlertVisualStyle;
enum SDCAlertControllerStyle : NSInteger;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS_NAMED("AlertController")
@interface SDCAlertController : UIViewController
/// The alert’s title. Directly uses <code>attributedTitle</code> without any attributes.
@property (nonatomic, copy) NSString * _Nullable title;
/// The alert’s message. Directly uses <code>attributedMessage</code> without any attributes.
@property (nonatomic, copy) NSString * _Nullable message;
/// A stylized title for the alert.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedTitle;
/// A stylized message for the alert.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedMessage;
/// The alert’s content view. This can be used to add custom views to your alert. The width of the content
/// view is equal to the width of the alert, minus padding. The height must be defined manually since it
/// depends on the size of the subviews.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// The alert’s actions (buttons).
@property (nonatomic, readonly, copy) NSArray<SDCAlertAction *> * _Nonnull actions;
/// The alert’s preferred action, if one is set. Setting this value to an action that wasn’t already added
/// to the array will add it and override its style to <code>.Preferred</code>. Setting this value to <code>nil</code> will
/// remove the preferred style from all actions.
@property (nonatomic, strong) SDCAlertAction * _Nullable preferredAction;
/// The layout of the actions in the alert.
@property (nonatomic) enum SDCActionLayout actionLayout;
/// The text fields that are added to the alert. Does nothing when used with an action sheet.
@property (nonatomic, readonly, copy) NSArray<UITextField *> * _Nullable textFields;
/// A closure that, when set, returns whether the alert or action sheet should dismiss after the user taps
/// on an action. If it returns false, the AlertAction handler will not be executed.
@property (nonatomic, copy) BOOL (^ _Nullable shouldDismissHandler)(SDCAlertAction * _Nullable);
/// The visual style that applies to the alert or action sheet.
@property (nonatomic, strong) SDCAlertVisualStyle * _Nonnull visualStyle;
/// The alert’s presentation style.
@property (nonatomic, readonly) enum SDCAlertControllerStyle preferredStyle;
/// Create an alert with an stylized title and message. If no styles are necessary, consider using
/// <code>init(title:message:preferredStyle:)</code>
/// \param attributedTitle An optional stylized title
///
/// \param attributedMessage An optional stylized message
///
/// \param preferredStyle The preferred presentation style of the alert. Default is <code>alert</code>.
///
- (nonnull instancetype)initWithAttributedTitle:(NSAttributedString * _Nullable)attributedTitle attributedMessage:(NSAttributedString * _Nullable)attributedMessage preferredStyle:(enum SDCAlertControllerStyle)preferredStyle;
/// Creates an alert with a plain title and message. To add styles to the title or message, use
/// <code>init(attributedTitle:attributedMessage:)</code>.
/// \param title An optional title
///
/// \param message An optional message
///
/// \param preferredStyle The preferred presentation style of the alert. Default is <code>alert</code>.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title message:(NSString * _Nullable)message preferredStyle:(enum SDCAlertControllerStyle)preferredStyle;
/// Adds the provided action to the alert. Unlike the <code>UIAlertController</code> API, this method adds and shows
/// buttons in the order they were added. This gives you the flexibility to place buttons of any style in
/// any position.
/// \param action The action to add.
///
- (void)add:(SDCAlertAction * _Nonnull)action;
/// Adds a text field to the alert.
/// \param configurationHandler An optional closure that can be used to configure the text field,
/// which is provided as a parameter to the closure.
///
- (void)addTextFieldWithHandler:(void (^ _Nullable)(UITextField * _Nonnull))configurationHandler;
/// Presents the alert.
/// \param animated Whether to present the alert animated.
///
/// \param completion An optional closure that’s called when the presentation finishes.
///
- (void)presentAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Dismisses the alert.
/// \param animated Whether to dismiss the alert animated.
///
/// \param completion An optional closure that’s called when the dismissal finishes.
///
- (void)dismissViewControllerAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface SDCAlertController (SWIFT_EXTENSION(SDCAlertView))
/// Convenience method to quickly display a basic alert.
/// \param title An optional title for the alert.
///
/// \param message An optional message for the alert.
///
/// \param actionTitle An optional action for the alert.
///
/// \param customView An optional view that will be displayed in the alert’s <code>contentView</code>.
///
///
/// returns:
/// The alert that was presented.
+ (SDCAlertController * _Nonnull)alertWithTitle:(NSString * _Nullable)title message:(NSString * _Nullable)message actionTitle:(NSString * _Nullable)actionTitle customView:(UIView * _Nullable)customView;
/// Convenience method to quickly display a basic action sheet.
/// \param title An optional title for the action sheet.
///
/// \param message An optional message for the action sheet.
///
/// \param actions The titles of the actions in the action sheet.
///
///
/// returns:
/// The action sheet that was presented.
+ (SDCAlertController * _Nonnull)sheetWithTitle:(NSString * _Nullable)title message:(NSString * _Nullable)message actions:(NSArray<NSString *> * _Nonnull)actions;
/// Convenience method to quickly display an action sheet with custom view.
/// \param view The view that should be displayed in the action sheet.
///
/// \param actions The titles of the actions in the action sheet.
///
///
/// returns:
/// The action sheet that was presented.
+ (SDCAlertController * _Nonnull)sheetWith:(UIView * _Nonnull)view actions:(NSArray<NSString *> * _Nonnull)actions SWIFT_WARN_UNUSED_RESULT;
@end

/// The alert controller’s style
/// <ul>
///   <li>
///     actionSheet: An action sheet style alert that slides in from the bottom and presents the user with a
///     list of possible actions to perform. Only available on iOS 9, and does not show as expected
///     on iPad.
///   </li>
///   <li>
///     alert:       The standard alert style that asks the user for information or confirmation.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, SDCAlertControllerStyle, "AlertControllerStyle") {
  SDCAlertControllerStyleActionSheet = 0,
  SDCAlertControllerStyleAlert = 1,
};

@class UIColor;
@class UIFont;

SWIFT_CLASS_NAMED("AlertVisualStyle")
@interface SDCAlertVisualStyle : NSObject
/// The width of the alert. A value of 1 or below is interpreted as a percentage of the width of the view
/// controller that presents the alert.
@property (nonatomic) CGFloat width;
/// The corner radius of the alert
@property (nonatomic) CGFloat cornerRadius;
/// The minimum distance between alert elements and the alert itself
@property (nonatomic) UIEdgeInsets contentPadding;
/// The minimum distance between the alert and its superview
@property (nonatomic) UIEdgeInsets margins;
/// The parallax magnitude
@property (nonatomic) UIOffset parallax;
/// The background color of the alert. The standard blur effect will be added if nil.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The vertical spacing between elements
@property (nonatomic) CGFloat verticalElementSpacing;
/// The size of an action. The specified width is treated as a minimum width. The actual width is
/// automatically determined.
@property (nonatomic) CGSize actionViewSize;
/// The color of an action when the user is tapping it
@property (nonatomic, strong) UIColor * _Nonnull actionHighlightColor;
/// The color of the separators between actions
@property (nonatomic, strong) UIColor * _Nonnull actionViewSeparatorColor;
/// The thickness of the separators between actions
@property (nonatomic) CGFloat actionViewSeparatorThickness;
/// The font used in text fields
@property (nonatomic, strong) UIFont * _Nonnull textFieldFont;
/// The height of a text field if added using the standard method call. Won’t affect text fields added
/// directly to the alert’s content view.
@property (nonatomic) CGFloat textFieldHeight;
/// The border color of a text field if added using the standard method call. Won’t affect text fields
/// added directly to the alert’s content view.
@property (nonatomic, strong) UIColor * _Nonnull textFieldBorderColor;
/// The inset of the text within the text field if added using the standard method call. Won’t affect text
/// fields added directly to the alert’s content view.
@property (nonatomic) UIEdgeInsets textFieldMargins;
/// The color for a nondestructive action’s text
@property (nonatomic, strong) UIColor * _Nullable normalTextColor;
/// The color for a destructive action’s text
@property (nonatomic, strong) UIColor * _Nonnull destructiveTextColor;
/// The font for an alert’s preferred action
@property (nonatomic, strong) UIFont * _Nonnull alertPreferredFont;
/// The font for an alert’s other actions
@property (nonatomic, strong) UIFont * _Nonnull alertNormalFont;
/// The font for an action sheet’s preferred action
@property (nonatomic, strong) UIFont * _Nonnull actionSheetPreferredFont;
/// The font for an action sheet’s other actions
@property (nonatomic, strong) UIFont * _Nonnull actionSheetNormalFont;
- (nonnull instancetype)initWithAlertStyle:(enum SDCAlertControllerStyle)alertStyle OBJC_DESIGNATED_INITIALIZER;
/// The text color for a given action.
/// \param action The action that determines the text color.
///
///
/// returns:
/// The text color, or nil to use the alert’s <code>tintColor</code>.
- (UIColor * _Nullable)textColorFor:(SDCAlertAction * _Nullable)action SWIFT_WARN_UNUSED_RESULT;
/// The font for a given action.
/// \param action The action for which to return the font.
///
///
/// returns:
/// The font.
- (UIFont * _Nonnull)fontFor:(SDCAlertAction * _Nullable)action SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface UIImage (SWIFT_EXTENSION(SDCAlertView))
@end


@interface UIViewController (SWIFT_EXTENSION(SDCAlertView))
@end

#pragma clang diagnostic pop
